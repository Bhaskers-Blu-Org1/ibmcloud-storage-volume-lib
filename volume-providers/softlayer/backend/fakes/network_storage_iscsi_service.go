// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	backend "github.com/IBM/ibmcloud-storage-volume-lib/volume-providers/softlayer/backend"
	datatypes "github.com/softlayer/softlayer-go/datatypes"
)

type NetworkStorageIscsiService struct {
	CreateSnapshotStub        func(*string) (datatypes.Network_Storage, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 *string
	}
	createSnapshotReturns struct {
		result1 datatypes.Network_Storage
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 datatypes.Network_Storage
		result2 error
	}
	FilterStub        func(string) backend.NetworkStorageIscsiService
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
	}
	filterReturns struct {
		result1 backend.NetworkStorageIscsiService
	}
	filterReturnsOnCall map[int]struct {
		result1 backend.NetworkStorageIscsiService
	}
	GetObjectStub        func() (datatypes.Network_Storage_Iscsi, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
	}
	getObjectReturns struct {
		result1 datatypes.Network_Storage_Iscsi
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 datatypes.Network_Storage_Iscsi
		result2 error
	}
	GetSnapshotsStub        func() ([]datatypes.Network_Storage, error)
	getSnapshotsMutex       sync.RWMutex
	getSnapshotsArgsForCall []struct {
	}
	getSnapshotsReturns struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	getSnapshotsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	GetSnapshotsForVolumeStub        func() ([]datatypes.Network_Storage, error)
	getSnapshotsForVolumeMutex       sync.RWMutex
	getSnapshotsForVolumeArgsForCall []struct {
	}
	getSnapshotsForVolumeReturns struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	getSnapshotsForVolumeReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	IDStub        func(int) backend.NetworkStorageIscsiService
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
		arg1 int
	}
	iDReturns struct {
		result1 backend.NetworkStorageIscsiService
	}
	iDReturnsOnCall map[int]struct {
		result1 backend.NetworkStorageIscsiService
	}
	MaskStub        func(string) backend.NetworkStorageIscsiService
	maskMutex       sync.RWMutex
	maskArgsForCall []struct {
		arg1 string
	}
	maskReturns struct {
		result1 backend.NetworkStorageIscsiService
	}
	maskReturnsOnCall map[int]struct {
		result1 backend.NetworkStorageIscsiService
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetworkStorageIscsiService) CreateSnapshot(arg1 *string) (datatypes.Network_Storage, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 *string
	}{arg1})
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1})
	fake.createSnapshotMutex.Unlock()
	if fake.CreateSnapshotStub != nil {
		return fake.CreateSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NetworkStorageIscsiService) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *NetworkStorageIscsiService) CreateSnapshotCalls(stub func(*string) (datatypes.Network_Storage, error)) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = stub
}

func (fake *NetworkStorageIscsiService) CreateSnapshotArgsForCall(i int) *string {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	argsForCall := fake.createSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *NetworkStorageIscsiService) CreateSnapshotReturns(result1 datatypes.Network_Storage, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) CreateSnapshotReturnsOnCall(i int, result1 datatypes.Network_Storage, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Storage
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) Filter(arg1 string) backend.NetworkStorageIscsiService {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Filter", []interface{}{arg1})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.filterReturns
	return fakeReturns.result1
}

func (fake *NetworkStorageIscsiService) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *NetworkStorageIscsiService) FilterCalls(stub func(string) backend.NetworkStorageIscsiService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = stub
}

func (fake *NetworkStorageIscsiService) FilterArgsForCall(i int) string {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	argsForCall := fake.filterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *NetworkStorageIscsiService) FilterReturns(result1 backend.NetworkStorageIscsiService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) FilterReturnsOnCall(i int, result1 backend.NetworkStorageIscsiService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkStorageIscsiService
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) GetObject() (datatypes.Network_Storage_Iscsi, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
	}{})
	fake.recordInvocation("GetObject", []interface{}{})
	fake.getObjectMutex.Unlock()
	if fake.GetObjectStub != nil {
		return fake.GetObjectStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NetworkStorageIscsiService) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *NetworkStorageIscsiService) GetObjectCalls(stub func() (datatypes.Network_Storage_Iscsi, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *NetworkStorageIscsiService) GetObjectReturns(result1 datatypes.Network_Storage_Iscsi, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 datatypes.Network_Storage_Iscsi
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) GetObjectReturnsOnCall(i int, result1 datatypes.Network_Storage_Iscsi, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Storage_Iscsi
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 datatypes.Network_Storage_Iscsi
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) GetSnapshots() ([]datatypes.Network_Storage, error) {
	fake.getSnapshotsMutex.Lock()
	ret, specificReturn := fake.getSnapshotsReturnsOnCall[len(fake.getSnapshotsArgsForCall)]
	fake.getSnapshotsArgsForCall = append(fake.getSnapshotsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSnapshots", []interface{}{})
	fake.getSnapshotsMutex.Unlock()
	if fake.GetSnapshotsStub != nil {
		return fake.GetSnapshotsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSnapshotsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NetworkStorageIscsiService) GetSnapshotsCallCount() int {
	fake.getSnapshotsMutex.RLock()
	defer fake.getSnapshotsMutex.RUnlock()
	return len(fake.getSnapshotsArgsForCall)
}

func (fake *NetworkStorageIscsiService) GetSnapshotsCalls(stub func() ([]datatypes.Network_Storage, error)) {
	fake.getSnapshotsMutex.Lock()
	defer fake.getSnapshotsMutex.Unlock()
	fake.GetSnapshotsStub = stub
}

func (fake *NetworkStorageIscsiService) GetSnapshotsReturns(result1 []datatypes.Network_Storage, result2 error) {
	fake.getSnapshotsMutex.Lock()
	defer fake.getSnapshotsMutex.Unlock()
	fake.GetSnapshotsStub = nil
	fake.getSnapshotsReturns = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) GetSnapshotsReturnsOnCall(i int, result1 []datatypes.Network_Storage, result2 error) {
	fake.getSnapshotsMutex.Lock()
	defer fake.getSnapshotsMutex.Unlock()
	fake.GetSnapshotsStub = nil
	if fake.getSnapshotsReturnsOnCall == nil {
		fake.getSnapshotsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Storage
			result2 error
		})
	}
	fake.getSnapshotsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) GetSnapshotsForVolume() ([]datatypes.Network_Storage, error) {
	fake.getSnapshotsForVolumeMutex.Lock()
	ret, specificReturn := fake.getSnapshotsForVolumeReturnsOnCall[len(fake.getSnapshotsForVolumeArgsForCall)]
	fake.getSnapshotsForVolumeArgsForCall = append(fake.getSnapshotsForVolumeArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSnapshotsForVolume", []interface{}{})
	fake.getSnapshotsForVolumeMutex.Unlock()
	if fake.GetSnapshotsForVolumeStub != nil {
		return fake.GetSnapshotsForVolumeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSnapshotsForVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *NetworkStorageIscsiService) GetSnapshotsForVolumeCallCount() int {
	fake.getSnapshotsForVolumeMutex.RLock()
	defer fake.getSnapshotsForVolumeMutex.RUnlock()
	return len(fake.getSnapshotsForVolumeArgsForCall)
}

func (fake *NetworkStorageIscsiService) GetSnapshotsForVolumeCalls(stub func() ([]datatypes.Network_Storage, error)) {
	fake.getSnapshotsForVolumeMutex.Lock()
	defer fake.getSnapshotsForVolumeMutex.Unlock()
	fake.GetSnapshotsForVolumeStub = stub
}

func (fake *NetworkStorageIscsiService) GetSnapshotsForVolumeReturns(result1 []datatypes.Network_Storage, result2 error) {
	fake.getSnapshotsForVolumeMutex.Lock()
	defer fake.getSnapshotsForVolumeMutex.Unlock()
	fake.GetSnapshotsForVolumeStub = nil
	fake.getSnapshotsForVolumeReturns = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) GetSnapshotsForVolumeReturnsOnCall(i int, result1 []datatypes.Network_Storage, result2 error) {
	fake.getSnapshotsForVolumeMutex.Lock()
	defer fake.getSnapshotsForVolumeMutex.Unlock()
	fake.GetSnapshotsForVolumeStub = nil
	if fake.getSnapshotsForVolumeReturnsOnCall == nil {
		fake.getSnapshotsForVolumeReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Storage
			result2 error
		})
	}
	fake.getSnapshotsForVolumeReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *NetworkStorageIscsiService) ID(arg1 int) backend.NetworkStorageIscsiService {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ID", []interface{}{arg1})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *NetworkStorageIscsiService) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *NetworkStorageIscsiService) IDCalls(stub func(int) backend.NetworkStorageIscsiService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *NetworkStorageIscsiService) IDArgsForCall(i int) int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	argsForCall := fake.iDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *NetworkStorageIscsiService) IDReturns(result1 backend.NetworkStorageIscsiService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) IDReturnsOnCall(i int, result1 backend.NetworkStorageIscsiService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkStorageIscsiService
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) Mask(arg1 string) backend.NetworkStorageIscsiService {
	fake.maskMutex.Lock()
	ret, specificReturn := fake.maskReturnsOnCall[len(fake.maskArgsForCall)]
	fake.maskArgsForCall = append(fake.maskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Mask", []interface{}{arg1})
	fake.maskMutex.Unlock()
	if fake.MaskStub != nil {
		return fake.MaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.maskReturns
	return fakeReturns.result1
}

func (fake *NetworkStorageIscsiService) MaskCallCount() int {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return len(fake.maskArgsForCall)
}

func (fake *NetworkStorageIscsiService) MaskCalls(stub func(string) backend.NetworkStorageIscsiService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = stub
}

func (fake *NetworkStorageIscsiService) MaskArgsForCall(i int) string {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	argsForCall := fake.maskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *NetworkStorageIscsiService) MaskReturns(result1 backend.NetworkStorageIscsiService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = nil
	fake.maskReturns = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) MaskReturnsOnCall(i int, result1 backend.NetworkStorageIscsiService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = nil
	if fake.maskReturnsOnCall == nil {
		fake.maskReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkStorageIscsiService
		})
	}
	fake.maskReturnsOnCall[i] = struct {
		result1 backend.NetworkStorageIscsiService
	}{result1}
}

func (fake *NetworkStorageIscsiService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.getSnapshotsMutex.RLock()
	defer fake.getSnapshotsMutex.RUnlock()
	fake.getSnapshotsForVolumeMutex.RLock()
	defer fake.getSnapshotsForVolumeMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetworkStorageIscsiService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.NetworkStorageIscsiService = new(NetworkStorageIscsiService)
