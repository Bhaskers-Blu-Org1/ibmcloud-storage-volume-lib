// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/alchemy-containers/armada-cluster/iaas/softlayer/backend"
)

type NetworkSubnetService struct {
	FilterStub        func(string) backend.NetworkSubnetService
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
	}
	filterReturns struct {
		result1 backend.NetworkSubnetService
	}
	filterReturnsOnCall map[int]struct {
		result1 backend.NetworkSubnetService
	}
	MaskStub        func(string) backend.NetworkSubnetService
	maskMutex       sync.RWMutex
	maskArgsForCall []struct {
		arg1 string
	}
	maskReturns struct {
		result1 backend.NetworkSubnetService
	}
	maskReturnsOnCall map[int]struct {
		result1 backend.NetworkSubnetService
	}
	IDStub        func(int) backend.NetworkSubnetService
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
		arg1 int
	}
	iDReturns struct {
		result1 backend.NetworkSubnetService
	}
	iDReturnsOnCall map[int]struct {
		result1 backend.NetworkSubnetService
	}
	GetSubnetStub        func() (datatypes.Network_Subnet, error)
	getSubnetMutex       sync.RWMutex
	getSubnetArgsForCall []struct{}
	getSubnetReturns     struct {
		result1 datatypes.Network_Subnet
		result2 error
	}
	getSubnetReturnsOnCall map[int]struct {
		result1 datatypes.Network_Subnet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetworkSubnetService) Filter(arg1 string) backend.NetworkSubnetService {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Filter", []interface{}{arg1})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.filterReturns.result1
}

func (fake *NetworkSubnetService) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *NetworkSubnetService) FilterArgsForCall(i int) string {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return fake.filterArgsForCall[i].arg1
}

func (fake *NetworkSubnetService) FilterReturns(result1 backend.NetworkSubnetService) {
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) FilterReturnsOnCall(i int, result1 backend.NetworkSubnetService) {
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkSubnetService
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) Mask(arg1 string) backend.NetworkSubnetService {
	fake.maskMutex.Lock()
	ret, specificReturn := fake.maskReturnsOnCall[len(fake.maskArgsForCall)]
	fake.maskArgsForCall = append(fake.maskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Mask", []interface{}{arg1})
	fake.maskMutex.Unlock()
	if fake.MaskStub != nil {
		return fake.MaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.maskReturns.result1
}

func (fake *NetworkSubnetService) MaskCallCount() int {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return len(fake.maskArgsForCall)
}

func (fake *NetworkSubnetService) MaskArgsForCall(i int) string {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return fake.maskArgsForCall[i].arg1
}

func (fake *NetworkSubnetService) MaskReturns(result1 backend.NetworkSubnetService) {
	fake.MaskStub = nil
	fake.maskReturns = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) MaskReturnsOnCall(i int, result1 backend.NetworkSubnetService) {
	fake.MaskStub = nil
	if fake.maskReturnsOnCall == nil {
		fake.maskReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkSubnetService
		})
	}
	fake.maskReturnsOnCall[i] = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) ID(arg1 int) backend.NetworkSubnetService {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ID", []interface{}{arg1})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.iDReturns.result1
}

func (fake *NetworkSubnetService) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *NetworkSubnetService) IDArgsForCall(i int) int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return fake.iDArgsForCall[i].arg1
}

func (fake *NetworkSubnetService) IDReturns(result1 backend.NetworkSubnetService) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) IDReturnsOnCall(i int, result1 backend.NetworkSubnetService) {
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 backend.NetworkSubnetService
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 backend.NetworkSubnetService
	}{result1}
}

func (fake *NetworkSubnetService) GetSubnet() (datatypes.Network_Subnet, error) {
	fake.getSubnetMutex.Lock()
	ret, specificReturn := fake.getSubnetReturnsOnCall[len(fake.getSubnetArgsForCall)]
	fake.getSubnetArgsForCall = append(fake.getSubnetArgsForCall, struct{}{})
	fake.recordInvocation("GetSubnet", []interface{}{})
	fake.getSubnetMutex.Unlock()
	if fake.GetSubnetStub != nil {
		return fake.GetSubnetStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSubnetReturns.result1, fake.getSubnetReturns.result2
}

func (fake *NetworkSubnetService) GetSubnetCallCount() int {
	fake.getSubnetMutex.RLock()
	defer fake.getSubnetMutex.RUnlock()
	return len(fake.getSubnetArgsForCall)
}

func (fake *NetworkSubnetService) GetSubnetReturns(result1 datatypes.Network_Subnet, result2 error) {
	fake.GetSubnetStub = nil
	fake.getSubnetReturns = struct {
		result1 datatypes.Network_Subnet
		result2 error
	}{result1, result2}
}

func (fake *NetworkSubnetService) GetSubnetReturnsOnCall(i int, result1 datatypes.Network_Subnet, result2 error) {
	fake.GetSubnetStub = nil
	if fake.getSubnetReturnsOnCall == nil {
		fake.getSubnetReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Subnet
			result2 error
		})
	}
	fake.getSubnetReturnsOnCall[i] = struct {
		result1 datatypes.Network_Subnet
		result2 error
	}{result1, result2}
}

func (fake *NetworkSubnetService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.getSubnetMutex.RLock()
	defer fake.getSubnetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetworkSubnetService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.NetworkSubnetService = new(NetworkSubnetService)
