// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/alchemy-containers/armada-cluster/iaas/softlayer/backend"
)

type ProductOrderService struct {
	FilterStub        func(string) backend.ProductOrderService
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
	}
	filterReturns struct {
		result1 backend.ProductOrderService
	}
	filterReturnsOnCall map[int]struct {
		result1 backend.ProductOrderService
	}
	MaskStub        func(string) backend.ProductOrderService
	maskMutex       sync.RWMutex
	maskArgsForCall []struct {
		arg1 string
	}
	maskReturns struct {
		result1 backend.ProductOrderService
	}
	maskReturnsOnCall map[int]struct {
		result1 backend.ProductOrderService
	}
	IDStub        func(int) backend.ProductOrderService
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
		arg1 int
	}
	iDReturns struct {
		result1 backend.ProductOrderService
	}
	iDReturnsOnCall map[int]struct {
		result1 backend.ProductOrderService
	}
	PlaceOrderStub        func(backend.ProductOrderContainer, *bool) (datatypes.Container_Product_Order_Receipt, error)
	placeOrderMutex       sync.RWMutex
	placeOrderArgsForCall []struct {
		arg1 backend.ProductOrderContainer
		arg2 *bool
	}
	placeOrderReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	placeOrderReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	VerifyOrderStub        func(backend.ProductOrderContainer) (datatypes.Container_Product_Order, error)
	verifyOrderMutex       sync.RWMutex
	verifyOrderArgsForCall []struct {
		arg1 backend.ProductOrderContainer
	}
	verifyOrderReturns struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	verifyOrderReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductOrderService) Filter(arg1 string) backend.ProductOrderService {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Filter", []interface{}{arg1})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.filterReturns.result1
}

func (fake *ProductOrderService) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *ProductOrderService) FilterArgsForCall(i int) string {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return fake.filterArgsForCall[i].arg1
}

func (fake *ProductOrderService) FilterReturns(result1 backend.ProductOrderService) {
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) FilterReturnsOnCall(i int, result1 backend.ProductOrderService) {
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 backend.ProductOrderService
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) Mask(arg1 string) backend.ProductOrderService {
	fake.maskMutex.Lock()
	ret, specificReturn := fake.maskReturnsOnCall[len(fake.maskArgsForCall)]
	fake.maskArgsForCall = append(fake.maskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Mask", []interface{}{arg1})
	fake.maskMutex.Unlock()
	if fake.MaskStub != nil {
		return fake.MaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.maskReturns.result1
}

func (fake *ProductOrderService) MaskCallCount() int {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return len(fake.maskArgsForCall)
}

func (fake *ProductOrderService) MaskArgsForCall(i int) string {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return fake.maskArgsForCall[i].arg1
}

func (fake *ProductOrderService) MaskReturns(result1 backend.ProductOrderService) {
	fake.MaskStub = nil
	fake.maskReturns = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) MaskReturnsOnCall(i int, result1 backend.ProductOrderService) {
	fake.MaskStub = nil
	if fake.maskReturnsOnCall == nil {
		fake.maskReturnsOnCall = make(map[int]struct {
			result1 backend.ProductOrderService
		})
	}
	fake.maskReturnsOnCall[i] = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) ID(arg1 int) backend.ProductOrderService {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ID", []interface{}{arg1})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.iDReturns.result1
}

func (fake *ProductOrderService) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *ProductOrderService) IDArgsForCall(i int) int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return fake.iDArgsForCall[i].arg1
}

func (fake *ProductOrderService) IDReturns(result1 backend.ProductOrderService) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) IDReturnsOnCall(i int, result1 backend.ProductOrderService) {
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 backend.ProductOrderService
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 backend.ProductOrderService
	}{result1}
}

func (fake *ProductOrderService) PlaceOrder(arg1 backend.ProductOrderContainer, arg2 *bool) (datatypes.Container_Product_Order_Receipt, error) {
	fake.placeOrderMutex.Lock()
	ret, specificReturn := fake.placeOrderReturnsOnCall[len(fake.placeOrderArgsForCall)]
	fake.placeOrderArgsForCall = append(fake.placeOrderArgsForCall, struct {
		arg1 backend.ProductOrderContainer
		arg2 *bool
	}{arg1, arg2})
	fake.recordInvocation("PlaceOrder", []interface{}{arg1, arg2})
	fake.placeOrderMutex.Unlock()
	if fake.PlaceOrderStub != nil {
		return fake.PlaceOrderStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.placeOrderReturns.result1, fake.placeOrderReturns.result2
}

func (fake *ProductOrderService) PlaceOrderCallCount() int {
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	return len(fake.placeOrderArgsForCall)
}

func (fake *ProductOrderService) PlaceOrderArgsForCall(i int) (backend.ProductOrderContainer, *bool) {
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	return fake.placeOrderArgsForCall[i].arg1, fake.placeOrderArgsForCall[i].arg2
}

func (fake *ProductOrderService) PlaceOrderReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.PlaceOrderStub = nil
	fake.placeOrderReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *ProductOrderService) PlaceOrderReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.PlaceOrderStub = nil
	if fake.placeOrderReturnsOnCall == nil {
		fake.placeOrderReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.placeOrderReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *ProductOrderService) VerifyOrder(arg1 backend.ProductOrderContainer) (datatypes.Container_Product_Order, error) {
	fake.verifyOrderMutex.Lock()
	ret, specificReturn := fake.verifyOrderReturnsOnCall[len(fake.verifyOrderArgsForCall)]
	fake.verifyOrderArgsForCall = append(fake.verifyOrderArgsForCall, struct {
		arg1 backend.ProductOrderContainer
	}{arg1})
	fake.recordInvocation("VerifyOrder", []interface{}{arg1})
	fake.verifyOrderMutex.Unlock()
	if fake.VerifyOrderStub != nil {
		return fake.VerifyOrderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.verifyOrderReturns.result1, fake.verifyOrderReturns.result2
}

func (fake *ProductOrderService) VerifyOrderCallCount() int {
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	return len(fake.verifyOrderArgsForCall)
}

func (fake *ProductOrderService) VerifyOrderArgsForCall(i int) backend.ProductOrderContainer {
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	return fake.verifyOrderArgsForCall[i].arg1
}

func (fake *ProductOrderService) VerifyOrderReturns(result1 datatypes.Container_Product_Order, result2 error) {
	fake.VerifyOrderStub = nil
	fake.verifyOrderReturns = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *ProductOrderService) VerifyOrderReturnsOnCall(i int, result1 datatypes.Container_Product_Order, result2 error) {
	fake.VerifyOrderStub = nil
	if fake.verifyOrderReturnsOnCall == nil {
		fake.verifyOrderReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order
			result2 error
		})
	}
	fake.verifyOrderReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *ProductOrderService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProductOrderService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.ProductOrderService = new(ProductOrderService)
