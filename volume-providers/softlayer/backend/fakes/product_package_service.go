// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/alchemy-containers/armada-cluster/iaas/softlayer/backend"
)

type ProductPackageService struct {
	FilterStub        func(string) backend.ProductPackageService
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
	}
	filterReturns struct {
		result1 backend.ProductPackageService
	}
	filterReturnsOnCall map[int]struct {
		result1 backend.ProductPackageService
	}
	MaskStub        func(string) backend.ProductPackageService
	maskMutex       sync.RWMutex
	maskArgsForCall []struct {
		arg1 string
	}
	maskReturns struct {
		result1 backend.ProductPackageService
	}
	maskReturnsOnCall map[int]struct {
		result1 backend.ProductPackageService
	}
	IDStub        func(int) backend.ProductPackageService
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
		arg1 int
	}
	iDReturns struct {
		result1 backend.ProductPackageService
	}
	iDReturnsOnCall map[int]struct {
		result1 backend.ProductPackageService
	}
	GetItemPricesStub        func() ([]datatypes.Product_Item_Price, error)
	getItemPricesMutex       sync.RWMutex
	getItemPricesArgsForCall []struct{}
	getItemPricesReturns     struct {
		result1 []datatypes.Product_Item_Price
		result2 error
	}
	getItemPricesReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Item_Price
		result2 error
	}
	GetAllObjectsStub        func() ([]datatypes.Product_Package, error)
	getAllObjectsMutex       sync.RWMutex
	getAllObjectsArgsForCall []struct{}
	getAllObjectsReturns     struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	getAllObjectsReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductPackageService) Filter(arg1 string) backend.ProductPackageService {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Filter", []interface{}{arg1})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.filterReturns.result1
}

func (fake *ProductPackageService) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *ProductPackageService) FilterArgsForCall(i int) string {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return fake.filterArgsForCall[i].arg1
}

func (fake *ProductPackageService) FilterReturns(result1 backend.ProductPackageService) {
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) FilterReturnsOnCall(i int, result1 backend.ProductPackageService) {
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 backend.ProductPackageService
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) Mask(arg1 string) backend.ProductPackageService {
	fake.maskMutex.Lock()
	ret, specificReturn := fake.maskReturnsOnCall[len(fake.maskArgsForCall)]
	fake.maskArgsForCall = append(fake.maskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Mask", []interface{}{arg1})
	fake.maskMutex.Unlock()
	if fake.MaskStub != nil {
		return fake.MaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.maskReturns.result1
}

func (fake *ProductPackageService) MaskCallCount() int {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return len(fake.maskArgsForCall)
}

func (fake *ProductPackageService) MaskArgsForCall(i int) string {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return fake.maskArgsForCall[i].arg1
}

func (fake *ProductPackageService) MaskReturns(result1 backend.ProductPackageService) {
	fake.MaskStub = nil
	fake.maskReturns = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) MaskReturnsOnCall(i int, result1 backend.ProductPackageService) {
	fake.MaskStub = nil
	if fake.maskReturnsOnCall == nil {
		fake.maskReturnsOnCall = make(map[int]struct {
			result1 backend.ProductPackageService
		})
	}
	fake.maskReturnsOnCall[i] = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) ID(arg1 int) backend.ProductPackageService {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ID", []interface{}{arg1})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.iDReturns.result1
}

func (fake *ProductPackageService) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *ProductPackageService) IDArgsForCall(i int) int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return fake.iDArgsForCall[i].arg1
}

func (fake *ProductPackageService) IDReturns(result1 backend.ProductPackageService) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) IDReturnsOnCall(i int, result1 backend.ProductPackageService) {
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 backend.ProductPackageService
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 backend.ProductPackageService
	}{result1}
}

func (fake *ProductPackageService) GetItemPrices() ([]datatypes.Product_Item_Price, error) {
	fake.getItemPricesMutex.Lock()
	ret, specificReturn := fake.getItemPricesReturnsOnCall[len(fake.getItemPricesArgsForCall)]
	fake.getItemPricesArgsForCall = append(fake.getItemPricesArgsForCall, struct{}{})
	fake.recordInvocation("GetItemPrices", []interface{}{})
	fake.getItemPricesMutex.Unlock()
	if fake.GetItemPricesStub != nil {
		return fake.GetItemPricesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getItemPricesReturns.result1, fake.getItemPricesReturns.result2
}

func (fake *ProductPackageService) GetItemPricesCallCount() int {
	fake.getItemPricesMutex.RLock()
	defer fake.getItemPricesMutex.RUnlock()
	return len(fake.getItemPricesArgsForCall)
}

func (fake *ProductPackageService) GetItemPricesReturns(result1 []datatypes.Product_Item_Price, result2 error) {
	fake.GetItemPricesStub = nil
	fake.getItemPricesReturns = struct {
		result1 []datatypes.Product_Item_Price
		result2 error
	}{result1, result2}
}

func (fake *ProductPackageService) GetItemPricesReturnsOnCall(i int, result1 []datatypes.Product_Item_Price, result2 error) {
	fake.GetItemPricesStub = nil
	if fake.getItemPricesReturnsOnCall == nil {
		fake.getItemPricesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Item_Price
			result2 error
		})
	}
	fake.getItemPricesReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Item_Price
		result2 error
	}{result1, result2}
}

func (fake *ProductPackageService) GetAllObjects() ([]datatypes.Product_Package, error) {
	fake.getAllObjectsMutex.Lock()
	ret, specificReturn := fake.getAllObjectsReturnsOnCall[len(fake.getAllObjectsArgsForCall)]
	fake.getAllObjectsArgsForCall = append(fake.getAllObjectsArgsForCall, struct{}{})
	fake.recordInvocation("GetAllObjects", []interface{}{})
	fake.getAllObjectsMutex.Unlock()
	if fake.GetAllObjectsStub != nil {
		return fake.GetAllObjectsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAllObjectsReturns.result1, fake.getAllObjectsReturns.result2
}

func (fake *ProductPackageService) GetAllObjectsCallCount() int {
	fake.getAllObjectsMutex.RLock()
	defer fake.getAllObjectsMutex.RUnlock()
	return len(fake.getAllObjectsArgsForCall)
}

func (fake *ProductPackageService) GetAllObjectsReturns(result1 []datatypes.Product_Package, result2 error) {
	fake.GetAllObjectsStub = nil
	fake.getAllObjectsReturns = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *ProductPackageService) GetAllObjectsReturnsOnCall(i int, result1 []datatypes.Product_Package, result2 error) {
	fake.GetAllObjectsStub = nil
	if fake.getAllObjectsReturnsOnCall == nil {
		fake.getAllObjectsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Package
			result2 error
		})
	}
	fake.getAllObjectsReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *ProductPackageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.getItemPricesMutex.RLock()
	defer fake.getItemPricesMutex.RUnlock()
	fake.getAllObjectsMutex.RLock()
	defer fake.getAllObjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProductPackageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.ProductPackageService = new(ProductPackageService)
