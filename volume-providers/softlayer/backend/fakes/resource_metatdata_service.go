// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	backend "github.com/IBM/ibmcloud-storage-volume-lib/volume-providers/softlayer/backend"
)

type ResourceMetadataService struct {
	FilterStub        func(string) backend.ResourceMetadataService
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
	}
	filterReturns struct {
		result1 backend.ResourceMetadataService
	}
	filterReturnsOnCall map[int]struct {
		result1 backend.ResourceMetadataService
	}
	GetDatacenterIdStub        func() (int, error)
	getDatacenterIdMutex       sync.RWMutex
	getDatacenterIdArgsForCall []struct {
	}
	getDatacenterIdReturns struct {
		result1 int
		result2 error
	}
	getDatacenterIdReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	IDStub        func(int) backend.ResourceMetadataService
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
		arg1 int
	}
	iDReturns struct {
		result1 backend.ResourceMetadataService
	}
	iDReturnsOnCall map[int]struct {
		result1 backend.ResourceMetadataService
	}
	MaskStub        func(string) backend.ResourceMetadataService
	maskMutex       sync.RWMutex
	maskArgsForCall []struct {
		arg1 string
	}
	maskReturns struct {
		result1 backend.ResourceMetadataService
	}
	maskReturnsOnCall map[int]struct {
		result1 backend.ResourceMetadataService
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ResourceMetadataService) Filter(arg1 string) backend.ResourceMetadataService {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Filter", []interface{}{arg1})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.filterReturns
	return fakeReturns.result1
}

func (fake *ResourceMetadataService) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *ResourceMetadataService) FilterCalls(stub func(string) backend.ResourceMetadataService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = stub
}

func (fake *ResourceMetadataService) FilterArgsForCall(i int) string {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	argsForCall := fake.filterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceMetadataService) FilterReturns(result1 backend.ResourceMetadataService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) FilterReturnsOnCall(i int, result1 backend.ResourceMetadataService) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 backend.ResourceMetadataService
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) GetDatacenterId() (int, error) {
	fake.getDatacenterIdMutex.Lock()
	ret, specificReturn := fake.getDatacenterIdReturnsOnCall[len(fake.getDatacenterIdArgsForCall)]
	fake.getDatacenterIdArgsForCall = append(fake.getDatacenterIdArgsForCall, struct {
	}{})
	fake.recordInvocation("GetDatacenterId", []interface{}{})
	fake.getDatacenterIdMutex.Unlock()
	if fake.GetDatacenterIdStub != nil {
		return fake.GetDatacenterIdStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDatacenterIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceMetadataService) GetDatacenterIdCallCount() int {
	fake.getDatacenterIdMutex.RLock()
	defer fake.getDatacenterIdMutex.RUnlock()
	return len(fake.getDatacenterIdArgsForCall)
}

func (fake *ResourceMetadataService) GetDatacenterIdCalls(stub func() (int, error)) {
	fake.getDatacenterIdMutex.Lock()
	defer fake.getDatacenterIdMutex.Unlock()
	fake.GetDatacenterIdStub = stub
}

func (fake *ResourceMetadataService) GetDatacenterIdReturns(result1 int, result2 error) {
	fake.getDatacenterIdMutex.Lock()
	defer fake.getDatacenterIdMutex.Unlock()
	fake.GetDatacenterIdStub = nil
	fake.getDatacenterIdReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *ResourceMetadataService) GetDatacenterIdReturnsOnCall(i int, result1 int, result2 error) {
	fake.getDatacenterIdMutex.Lock()
	defer fake.getDatacenterIdMutex.Unlock()
	fake.GetDatacenterIdStub = nil
	if fake.getDatacenterIdReturnsOnCall == nil {
		fake.getDatacenterIdReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getDatacenterIdReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *ResourceMetadataService) ID(arg1 int) backend.ResourceMetadataService {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ID", []interface{}{arg1})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *ResourceMetadataService) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *ResourceMetadataService) IDCalls(stub func(int) backend.ResourceMetadataService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *ResourceMetadataService) IDArgsForCall(i int) int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	argsForCall := fake.iDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceMetadataService) IDReturns(result1 backend.ResourceMetadataService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) IDReturnsOnCall(i int, result1 backend.ResourceMetadataService) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 backend.ResourceMetadataService
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) Mask(arg1 string) backend.ResourceMetadataService {
	fake.maskMutex.Lock()
	ret, specificReturn := fake.maskReturnsOnCall[len(fake.maskArgsForCall)]
	fake.maskArgsForCall = append(fake.maskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Mask", []interface{}{arg1})
	fake.maskMutex.Unlock()
	if fake.MaskStub != nil {
		return fake.MaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.maskReturns
	return fakeReturns.result1
}

func (fake *ResourceMetadataService) MaskCallCount() int {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	return len(fake.maskArgsForCall)
}

func (fake *ResourceMetadataService) MaskCalls(stub func(string) backend.ResourceMetadataService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = stub
}

func (fake *ResourceMetadataService) MaskArgsForCall(i int) string {
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	argsForCall := fake.maskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceMetadataService) MaskReturns(result1 backend.ResourceMetadataService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = nil
	fake.maskReturns = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) MaskReturnsOnCall(i int, result1 backend.ResourceMetadataService) {
	fake.maskMutex.Lock()
	defer fake.maskMutex.Unlock()
	fake.MaskStub = nil
	if fake.maskReturnsOnCall == nil {
		fake.maskReturnsOnCall = make(map[int]struct {
			result1 backend.ResourceMetadataService
		})
	}
	fake.maskReturnsOnCall[i] = struct {
		result1 backend.ResourceMetadataService
	}{result1}
}

func (fake *ResourceMetadataService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.getDatacenterIdMutex.RLock()
	defer fake.getDatacenterIdMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.maskMutex.RLock()
	defer fake.maskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ResourceMetadataService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.ResourceMetadataService = new(ResourceMetadataService)
