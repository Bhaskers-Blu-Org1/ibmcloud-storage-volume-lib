// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.ibm.com/narkarum/ibmcloud-storage-volume-lib/volume-providers/vpc/metrics"
)

type SummaryMetric struct {
	RegisterMetricStub        func(registerer prometheus.Registerer)
	registerMetricMutex       sync.RWMutex
	registerMetricArgsForCall []struct {
		registerer prometheus.Registerer
	}
	ObserveSinceStartStub        func(labels metrics.MetricLabels, startTime time.Time)
	observeSinceStartMutex       sync.RWMutex
	observeSinceStartArgsForCall []struct {
		labels    metrics.MetricLabels
		startTime time.Time
	}
	ObserveBetweenStub        func(labels metrics.MetricLabels, startTime time.Time, endTime time.Time)
	observeBetweenMutex       sync.RWMutex
	observeBetweenArgsForCall []struct {
		labels    metrics.MetricLabels
		startTime time.Time
		endTime   time.Time
	}
	ObserveValueStub        func(labels metrics.MetricLabels, value float64)
	observeValueMutex       sync.RWMutex
	observeValueArgsForCall []struct {
		labels metrics.MetricLabels
		value  float64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SummaryMetric) RegisterMetric(registerer prometheus.Registerer) {
	fake.registerMetricMutex.Lock()
	fake.registerMetricArgsForCall = append(fake.registerMetricArgsForCall, struct {
		registerer prometheus.Registerer
	}{registerer})
	fake.recordInvocation("RegisterMetric", []interface{}{registerer})
	fake.registerMetricMutex.Unlock()
	if fake.RegisterMetricStub != nil {
		fake.RegisterMetricStub(registerer)
	}
}

func (fake *SummaryMetric) RegisterMetricCallCount() int {
	fake.registerMetricMutex.RLock()
	defer fake.registerMetricMutex.RUnlock()
	return len(fake.registerMetricArgsForCall)
}

func (fake *SummaryMetric) RegisterMetricArgsForCall(i int) prometheus.Registerer {
	fake.registerMetricMutex.RLock()
	defer fake.registerMetricMutex.RUnlock()
	return fake.registerMetricArgsForCall[i].registerer
}

func (fake *SummaryMetric) ObserveSinceStart(labels metrics.MetricLabels, startTime time.Time) {
	fake.observeSinceStartMutex.Lock()
	fake.observeSinceStartArgsForCall = append(fake.observeSinceStartArgsForCall, struct {
		labels    metrics.MetricLabels
		startTime time.Time
	}{labels, startTime})
	fake.recordInvocation("ObserveSinceStart", []interface{}{labels, startTime})
	fake.observeSinceStartMutex.Unlock()
	if fake.ObserveSinceStartStub != nil {
		fake.ObserveSinceStartStub(labels, startTime)
	}
}

func (fake *SummaryMetric) ObserveSinceStartCallCount() int {
	fake.observeSinceStartMutex.RLock()
	defer fake.observeSinceStartMutex.RUnlock()
	return len(fake.observeSinceStartArgsForCall)
}

func (fake *SummaryMetric) ObserveSinceStartArgsForCall(i int) (metrics.MetricLabels, time.Time) {
	fake.observeSinceStartMutex.RLock()
	defer fake.observeSinceStartMutex.RUnlock()
	return fake.observeSinceStartArgsForCall[i].labels, fake.observeSinceStartArgsForCall[i].startTime
}

func (fake *SummaryMetric) ObserveBetween(labels metrics.MetricLabels, startTime time.Time, endTime time.Time) {
	fake.observeBetweenMutex.Lock()
	fake.observeBetweenArgsForCall = append(fake.observeBetweenArgsForCall, struct {
		labels    metrics.MetricLabels
		startTime time.Time
		endTime   time.Time
	}{labels, startTime, endTime})
	fake.recordInvocation("ObserveBetween", []interface{}{labels, startTime, endTime})
	fake.observeBetweenMutex.Unlock()
	if fake.ObserveBetweenStub != nil {
		fake.ObserveBetweenStub(labels, startTime, endTime)
	}
}

func (fake *SummaryMetric) ObserveBetweenCallCount() int {
	fake.observeBetweenMutex.RLock()
	defer fake.observeBetweenMutex.RUnlock()
	return len(fake.observeBetweenArgsForCall)
}

func (fake *SummaryMetric) ObserveBetweenArgsForCall(i int) (metrics.MetricLabels, time.Time, time.Time) {
	fake.observeBetweenMutex.RLock()
	defer fake.observeBetweenMutex.RUnlock()
	return fake.observeBetweenArgsForCall[i].labels, fake.observeBetweenArgsForCall[i].startTime, fake.observeBetweenArgsForCall[i].endTime
}

func (fake *SummaryMetric) ObserveValue(labels metrics.MetricLabels, value float64) {
	fake.observeValueMutex.Lock()
	fake.observeValueArgsForCall = append(fake.observeValueArgsForCall, struct {
		labels metrics.MetricLabels
		value  float64
	}{labels, value})
	fake.recordInvocation("ObserveValue", []interface{}{labels, value})
	fake.observeValueMutex.Unlock()
	if fake.ObserveValueStub != nil {
		fake.ObserveValueStub(labels, value)
	}
}

func (fake *SummaryMetric) ObserveValueCallCount() int {
	fake.observeValueMutex.RLock()
	defer fake.observeValueMutex.RUnlock()
	return len(fake.observeValueArgsForCall)
}

func (fake *SummaryMetric) ObserveValueArgsForCall(i int) (metrics.MetricLabels, float64) {
	fake.observeValueMutex.RLock()
	defer fake.observeValueMutex.RUnlock()
	return fake.observeValueArgsForCall[i].labels, fake.observeValueArgsForCall[i].value
}

func (fake *SummaryMetric) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerMetricMutex.RLock()
	defer fake.registerMetricMutex.RUnlock()
	fake.observeSinceStartMutex.RLock()
	defer fake.observeSinceStartMutex.RUnlock()
	fake.observeBetweenMutex.RLock()
	defer fake.observeBetweenMutex.RUnlock()
	fake.observeValueMutex.RLock()
	defer fake.observeValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SummaryMetric) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.SummaryMetric = new(SummaryMetric)
